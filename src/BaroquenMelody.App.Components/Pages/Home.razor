@page "/"

@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@implements IDisposable

<PageTitle>Home</PageTitle>

<MudContainer Class="mb-3" Gutters="false">
    <MudGrid Class="mb-2" Justify="Justify.FlexEnd" Spacing="1">
        <MudItem>
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Folder" IconColor="Color.Primary">Load Configuration</MudButton>
        </MudItem>
        <MudItem>
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" IconColor="Color.Secondary">Save Configuration</MudButton>
        </MudItem>
        <MudItem>
            @if (!CompositionProgressState.Value.IsLoading)
            {
                <MudButton Variant="Variant.Filled"
                           StartIcon="@Icons.Material.Filled.ElectricBolt"
                           Color="Color.Tertiary"
                           OnClick="Compose"
                           Disabled="@CompositionProgressState.Value.IsLoading">
                    Compose
                </MudButton>
            }
            else
            {
                <MudButton Variant="Variant.Filled"
                           Color="Color.Tertiary"
                           Disabled="@CompositionProgressState.Value.IsLoading">
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                    <MudText Class="ms-2" Typo="Typo.button">Compose</MudText>
                </MudButton>
            }
        </MudItem>
    </MudGrid>
    <MudTabs Outlined="true"
             Rounded="true"
             Elevation="3"
             Centered="true"
             ApplyEffectsToContainer="true"
             IconColor="Color.Secondary"
             Border="true"
             SliderAnimation="true"
             @ref="_tabs">
        <MudTabPanel Text="General" Icon="@Icons.Material.Outlined.Settings">
            <CompositionConfigurationPanel/>
        </MudTabPanel>
        <MudTabPanel Text="Instrumentation" Icon="@Icons.Material.Outlined.Piano">
            <InstrumentConfigurationPanel/>
        </MudTabPanel>
        <MudTabPanel Text="Rules" Icon="@Icons.Material.Outlined.Rule">
            <CompositionRuleConfigurationPanel/>
        </MudTabPanel>
        <MudTabPanel Text="Ornamentation" Icon="@Icons.Material.Outlined.AutoAwesome">
            <OrnamentationConfigurationPanel/>
        </MudTabPanel>
        <MudTabPanel @ref="_compositionTab" Text="Composition" Icon="@Icons.Material.Outlined.MusicNote">
            <CompositionProgress/>
        </MudTabPanel>
    </MudTabs>
</MudContainer>

@code {
    private MudTabs? _tabs;

    private MudTabPanel? _compositionTab;

    private IDisposable? _baroquenMelodySubscription;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _baroquenMelodySubscription = BaroquenMelodyState
            .ObserveChanges()
            .Subscribe(state =>
            {
                if (state.Value.BaroquenMelody is not null)
                {
                    WriteMidiFile(state.Value.BaroquenMelody);
                }
            });
    }

    private void Compose()
    {
        Dispatcher.Dispatch(new Compose());

        ActivateCompositionTab();
    }

    private void ActivateCompositionTab()
    {
        if (_tabs?.ActivePanel != _compositionTab)
        {
            _tabs?.ActivatePanel(_compositionTab);
        }
    }

    private static void WriteMidiFile(BaroquenMelody baroquenMelody)
    {
        var desktopDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
        var timestamp = DateTime.Now.ToString("yyyyMMddHHmmss", CultureInfo.InvariantCulture);

        var path = Path.Combine(desktopDirectory, $"test-{timestamp}.mid");

        baroquenMelody.MidiFile.Write(path);
    }

    protected virtual void Dispose(bool disposing)
    {
        if (disposing)
        {
            _baroquenMelodySubscription?.Dispose();
        }
    }

    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

}
