@page "/"

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Baroquen Melody</PageTitle>

<MudContainer Class="mb-3" Gutters="false">
    <MudGrid Class="mb-2 d-flex justify-center justify-sm-end flex-grow-1 flex-sm-grow-0" Spacing="2">
        <MudItem>
            @if (!CompositionProgressState.Value.IsLoading)
            {
                <MudTooltip Text="@InstrumentConfigurationState.Value.ValidationMessage"
                            Color="Color.Warning"
                            Delay="ThemeProvider.TooltipDelay"
                            Duration="ThemeProvider.TooltipDuration"
                            Disabled="@InstrumentConfigurationState.Value.IsValid">
                    <MudButton Variant="Variant.Filled"
                               StartIcon="@Icons.Material.Filled.ElectricBolt"
                               Color="Color.Tertiary"
                               OnClick="Compose"
                               Disabled="@(CompositionProgressState.Value.IsLoading || !InstrumentConfigurationState.Value.IsValid)"
                               FullWidth="true">
                        Compose
                    </MudButton>
                </MudTooltip>
            }
            else
            {
                <MudButton Variant="Variant.Filled"
                           Color="Color.Tertiary"
                           Disabled="@CompositionProgressState.Value.IsLoading"
                           FullWidth="true">
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                    <MudText Class="ms-2" Typo="Typo.button">Compose</MudText>
                </MudButton>
            }
        </MudItem>
        <MudItem>
            <MudButton Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Filled.Save"
                       IconColor="Color.Primary"
                       FullWidth="true"
                       OnClick="SaveCompositionConfiguration">
                Save Configuration
            </MudButton>
        </MudItem>
    </MudGrid>
    <MudTabs Outlined="true"
             Rounded="true"
             Elevation="3"
             Centered="true"
             ApplyEffectsToContainer="true"
             IconColor="Color.Secondary"
             Border="true"
             SliderAnimation="true"
             @ref="_tabs">
        <MudTabPanel Text="General" Icon="@Icons.Material.Outlined.Settings">
            <CompositionConfigurationPanel/>
        </MudTabPanel>
        <MudTabPanel Text="Instrumentation" Icon="@InstrumentationTabIcon" IconColor="@InstrumentationTabIconColor">
            <TabContent>
                <MudText Typo="Typo.button" Class="d-flex align-content-center">
                    <MudIcon Icon="@InstrumentationTabIcon" Color="@InstrumentationTabIconColor" Class="mr-2"/> Instrumentation
                </MudText>
            </TabContent>
            <TabWrapperContent>
                <MudTooltip Text="@InstrumentConfigurationState.Value.ValidationMessage"
                            Placement="Placement.Top"
                            Arrow="true"
                            Color="Color.Warning"
                            Disabled="@InstrumentConfigurationState.Value.IsValid"
                            Delay="ThemeProvider.TooltipDelay"
                            Duration="ThemeProvider.TooltipDuration">
                    @context
                </MudTooltip>
            </TabWrapperContent>
            <ChildContent>
                <InstrumentConfigurationPanel/>
            </ChildContent>
        </MudTabPanel>
        <MudTabPanel Text="Rules" Icon="@Icons.Material.Outlined.Rule">
            <CompositionRuleConfigurationPanel/>
        </MudTabPanel>
        <MudTabPanel Text="Ornamentation" Icon="@Icons.Material.Outlined.AutoAwesome">
            <OrnamentationConfigurationPanel/>
        </MudTabPanel>
        <MudTabPanel @ref="_compositionTab" Text="Composition" Icon="@Icons.Material.Outlined.MusicNote">
            <CompositionProgress/>
        </MudTabPanel>
    </MudTabs>
</MudContainer>

@code {
    private MudTabs? _tabs;

    private MudTabPanel? _compositionTab;

    private string InstrumentationTabIcon => InstrumentConfigurationState.Value.IsValid
        ? Icons.Material.Outlined.Piano
        : Icons.Material.Outlined.Warning;

    private Color InstrumentationTabIconColor => InstrumentConfigurationState.Value.IsValid
        ? Color.Secondary
        : Color.Warning;

    private async Task Compose()
    {
        if (!BaroquenMelodyState.Value.HasBeenSaved && BaroquenMelodyState.Value.BaroquenMelody is not null)
        {
            var dialogReference = await Dialog.ShowAsync<ConfirmCompositionDialogue>("Save composition?");
            var dialogResult = await dialogReference.Result;

            if (dialogResult?.Canceled ?? false)
            {
                return;
            }

            if (dialogResult?.Data is true)
            {
                await Save();
            }
        }

        Dispatcher.Dispatch(new Compose());

        ActivateCompositionTab();
    }

    private void ActivateCompositionTab()
    {
        if (_tabs?.ActivePanel != _compositionTab)
        {
            _tabs?.ActivatePanel(_compositionTab);
        }
    }

    private async Task Save()
    {
        var isSaved = await MidiSaver.SaveAsync(
            BaroquenMelodyState.Value.BaroquenMelody!,
            BaroquenMelodyState.Value.Path,
            new CancellationTokenSource(TimeSpan.FromSeconds(10)).Token
        ).ConfigureAwait(false);

        if (isSaved)
        {
            Snackbar.Add("Saved composition!", Severity.Success);
            Dispatcher.Dispatch(new MarkCompositionSaved());
        }
    }

    private async Task SaveCompositionConfiguration()
    {
        var dialogReference = await Dialog.ShowAsync<SaveCompositionConfigurationDialog>("Save composition configuration?");

        var dialogResult = await dialogReference.Result;

        if (dialogResult?.Canceled is true)
        {
            return;
        }

        if (dialogResult?.Data is true)
        {
            Snackbar.Add("Saved composition configuration!", Severity.Success);
        }
        else
        {
            Snackbar.Add("Failed to save composition configuration!", Severity.Error);
        }
    }

}
