@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<MudCard Class="rounded my-3 mx-3" Elevation="3" Outlined="true">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Composition Configuration</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12" sm="6" md="3">
                <SelectWithPopover T="NoteName"
                                   Items="CompositionConfigurationService.ConfigurableRootNotes"
                                   Label="Tonic Note"
                                   ValueProvider="() => RootNote"
                                   ValueChanged="HandleTonicNoteChange"
                                   ConvertToDisplay="noteName => noteName.ToSpaceSeparatedString()">
                    <PopoverContent>
                        <MudText>The <MudLink Color="Color.Tertiary" Href="https://en.wikipedia.org/wiki/Tonic_(music)">tonic</MudLink> of the scale used in the composition.</MudText>
                    </PopoverContent>
                </SelectWithPopover>
            </MudItem>
            <MudItem xs="12" sm="6" md="2">
                <SelectWithPopover T="Mode"
                                   Items="CompositionConfigurationService.ConfigurableScaleModes"
                                   Label="Mode"
                                   ValueProvider="() => Mode"
                                   ValueChanged="HandleModeChange"
                                   ConvertToDisplay="mode => mode.ToSpaceSeparatedString()">
                    <PopoverContent>
                        <MudText>The <MudLink Color="Color.Tertiary" Href="https://en.wikipedia.org/wiki/Mode_(music)">mode</MudLink> of the scale used in the composition.</MudText>
                    </PopoverContent>
                </SelectWithPopover>
            </MudItem>
            <MudItem xs="12" sm="6" md="2">
                <SelectWithPopover T="Meter"
                                   Items="CompositionConfigurationService.ConfigurableMeters"
                                   Label="Meter"
                                   ValueProvider="() => Meter"
                                   ValueChanged="HandleMeterChange"
                                   ConvertToDisplay="meter => meter.AsString()">
                    <PopoverContent>
                        <MudText>The <MudLink Color="Color.Tertiary" Href="https://en.wikipedia.org/wiki/Metre_(music)">meter</MudLink> of the composition.</MudText>
                    </PopoverContent>
                </SelectWithPopover>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <NumericInputWithPopover T="int"
                                         Label="Minimum Measures"
                                         ValueChanged="HandleCompositionLengthChange"
                                         ValueProvider="() => MinimumMeasures"
                                         Min="1"
                                         Max="int.MaxValue">
                    <PopoverContent>
                        <MudText>The minimum number of <MudLink Color="Color.Tertiary" Href="https://en.wikipedia.org/wiki/Bar_(music)">measures</MudLink> in the composition.</MudText>
                    </PopoverContent>
                </NumericInputWithPopover>
            </MudItem>
            <MudItem xs="12" sm="6" md="2">
                <NumericInputWithPopover T="int"
                                         Label="Tempo"
                                         ValueChanged="HandleTempoChange"
                                         ValueProvider="() => Tempo"
                                         Min="1"
                                         Max="int.MaxValue">
                    <PopoverContent>
                        <MudText>The <MudLink Color="Color.Tertiary" Href="https://en.wikipedia.org/wiki/Tempo">tempo</MudLink>, or beats per minute (BPM) of the composition.</MudText>
                    </PopoverContent>
                </NumericInputWithPopover>
            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>

@code {
    private NoteName RootNote => CompositionConfigurationState.Value.TonicNote;

    private Mode Mode => CompositionConfigurationState.Value.Mode;

    private Meter Meter => CompositionConfigurationState.Value.Meter;

    private int MinimumMeasures => CompositionConfigurationState.Value.MinimumMeasures;

    private int Tempo => CompositionConfigurationState.Value.Tempo;

    private void HandleTonicNoteChange(NoteName note) => Dispatcher.Dispatch(new UpdateCompositionConfiguration(note, Mode, Meter, MinimumMeasures, Tempo));

    private void HandleModeChange(Mode mode) => Dispatcher.Dispatch(new UpdateCompositionConfiguration(RootNote, mode, Meter, MinimumMeasures, Tempo));

    private void HandleMeterChange(Meter meter) => Dispatcher.Dispatch(new UpdateCompositionConfiguration(RootNote, Mode, meter, MinimumMeasures, Tempo));

    private void HandleCompositionLengthChange(int length) => Dispatcher.Dispatch(new UpdateCompositionConfiguration(RootNote, Mode, Meter, length, Tempo));

    private void HandleTempoChange(int tempo) => Dispatcher.Dispatch(new UpdateCompositionConfiguration(RootNote, Mode, Meter, MinimumMeasures, tempo));
}
