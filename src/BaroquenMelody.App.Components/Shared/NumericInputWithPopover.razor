@typeparam T

<MudOverlay @bind-Visible="IsPopoverOpen" AutoClose="true"/>
<MudPopover AnchorOrigin="Origin.TopCenter"
            Open="IsPopoverOpen"
            Elevation="3"
            Delay="ThemeProvider.TooltipDelay"
            Duration="ThemeProvider.TooltipDuration">
    <MudCard Class="rounded" Outlined="true" Elevation="3">
        <MudCardContent>
            @PopoverContent
        </MudCardContent>
    </MudCard>
</MudPopover>
<MudNumericField T="T" 
                 OnAdornmentClick="OpenMeterPopover" 
                 AdornmentIcon="@Icons.Material.Outlined.QuestionMark" 
                 Adornment="Adornment.End" 
                 IconSize="Size.Small" 
                 Variant="Variant.Outlined" 
                 Value="Value" 
                 Label="@Label" 
                 ValueChanged="ValueChanged"
                 Min="Min"
                 Max="Max"/>

@code
{
    [Parameter, EditorRequired] public required RenderFragment PopoverContent { get; set; }

    [Parameter, EditorRequired] public required string Label { get; set; }

    [Parameter, EditorRequired] public required Func<T> ValueProvider { get; set; }

    [Parameter, EditorRequired] public required EventCallback<T> ValueChanged { get; set; }

    [Parameter] public T? Min { get; set; }

    [Parameter] public T? Max { get; set; }

    private void OpenMeterPopover() => IsPopoverOpen = true;

    private bool IsPopoverOpen;

    private T Value => ValueProvider();
}
