@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@if (CompositionProgressState.Value.IsWaiting)
{
    <MudGrid Class="my-2" Justify="Justify.Center">
        <MudAnimate
            Selector=".compose-button"
            Duration="2"
            AnimationType="AnimationType.ShadowInset"
            Value="360"
            ValueSecondary="null"
            Hover="false"
            Delay="0"
            Infinite="true"
            IterationCount="1"
            AnimationTiming="AnimationTiming.EaseInOut"
            AnimationDirection="AnimationDirection.AlternateReverse"
            AnimationFillMode="AnimationFillMode.None"
            Paused="false"/>
        <MudItem xs="12" sm="12" md="12" lg="12" xl="12" xxl="12">
            <div class="d-flex flex-shrink align-center justify-center ma-0" style="height:300px;">
                <MudTooltip Text="@InstrumentConfigurationState.Value.ValidationMessage"
                            Color="Color.Warning"
                            Delay="ThemeProvider.TooltipDelay"
                            Duration="ThemeProvider.TooltipDuration"
                            Disabled="@InstrumentConfigurationState.Value.IsValid">
                    <MudButton Class="compose-button d-flex align-center justify-center mud-elevation-4"
                               Variant="Variant.Filled"
                               StartIcon="@Icons.Material.Filled.ElectricBolt"
                               Color="Color.Tertiary"
                               Style="width: 300px; height: 100px;"
                               OnClick="Compose"
                               Disabled="@(!InstrumentConfigurationState.Value.IsValid)">
                        <MudText Typo="Typo.button" Style="font-size:large">Compose</MudText>
                    </MudButton>
                </MudTooltip>
            </div>
        </MudItem>
    </MudGrid>
}
else if (CompositionProgressState.Value.IsFailed)
{
    <MudGrid Class="my-2" Justify="Justify.Center">
        <MudAnimate 
            Selector=".composition-failed"
            Duration="2"
            AnimationType="AnimationType.ShadowInset"
            Value="360"
            ValueSecondary="null"
            Hover="false"
            Delay="0"
            Infinite="true"
            IterationCount="1"
            AnimationTiming="AnimationTiming.EaseInOut"
            AnimationDirection="AnimationDirection.AlternateReverse"
            AnimationFillMode="AnimationFillMode.None"
            Paused="false"/>
        <MudItem xs="12" sm="12" md="12" lg="12" xl="12" xxl="12">
            <div class="d-flex flex-shrink align-center justify-center ma-0" style="height:300px;">
                <MudAlert Severity="Severity.Error"
                          Class="composition-failed mud-elevation-4"
                          Variant="Variant.Outlined"
                          Elevation="ThemeProvider.Elevation"
                          ShowCloseIcon="true"
                          CloseIconClicked="() => Dispatcher.Dispatch(new ResetCompositionProgress())">
                    Failed to compose. Try again, or try a different configuration.
                </MudAlert>
            </div>
        </MudItem>
    </MudGrid>
}
else
{
    <MudCard Class="rounded my-2 mx-2 px-4 py-4 mud-elevation-4" Elevation="ThemeProvider.Elevation" Outlined="true">
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12" sm="12" md="12" lg="12" xl="12" xxl="12">
                <MudText Typo="Typo.h6">@CompositionProgressState.Value.Message</MudText>
            </MudItem>
            <MudItem xs="12" sm="12" md="12" lg="12" xl="12" xxl="12">
                <MudProgressLinear Min="0"
                                   Max="100"
                                   Value="@(CompositionProgressState.Value.OverallProgress)"
                                   Size="Size.Large"
                                   Color="Color.Primary"
                                   Striped="@(CompositionProgressState.Value.OverallProgress < 100)">
                    <MudText Typo="Typo.button">
                        <b>@($"{double.Round(CompositionProgressState.Value.OverallProgress, MidpointRounding.ToEven)}%")</b>
                    </MudText>
                </MudProgressLinear>
            </MudItem>
            @if (CompositionProgressState.Value.IsLoading)
            {
                <MudItem>
                    <MudButton StartIcon="@Icons.Material.Sharp.Cancel"
                               Size="Size.Large"
                               Variant="Variant.Filled"
                               IconColor="Color.Primary"
                               Disabled="@(!CompositionProgressState.Value.IsLoading)"
                               OnClick="() => Dispatcher.Dispatch(new CancelComposition())"
                               FullWidth="true">
                        Cancel Composition
                    </MudButton>
                </MudItem>
            }
            else
            {
                <MudItem xs="12" sm="6" md="6" lg="6" xl="6" xxl="6" Class="d-flex justify-center justify-sm-end">
                    <MudButton Size="Size.Large"
                               StartIcon="@Icons.Material.Sharp.PlayArrow"
                               Variant="Variant.Filled"
                               Color="Color.Tertiary"
                               Class="d-flex flex-grow-1 flex-sm-grow-0"
                               OnClick="Play"
                               Disabled="CompositionProgressState.Value.IsLoading">
                        Play Composition
                    </MudButton>
                </MudItem>
                <MudItem xs="12" sm="6" md="6" lg="6" xl="6" xxl="6" Class="d-flex justify-center justify-sm-start">
                    <MudButton Size="Size.Large"
                               StartIcon="@Icons.Material.Sharp.Save"
                               IconColor="Color.Secondary"
                               Variant="Variant.Filled"
                               Class="d-flex flex-grow-1 flex-sm-grow-0"
                               OnClick="Save"
                               Disabled="CompositionProgressState.Value.IsLoading">
                        Save Composition
                    </MudButton>
                </MudItem>
            }
        </MudGrid>
    </MudCard>
}

@code {

    private async Task Compose()
    {
        if (!BaroquenMelodyState.Value.HasBeenSaved && BaroquenMelodyState.Value.BaroquenMelody is not null)
        {
            var dialogReference = await DialogService.ShowAsync<ConfirmCompositionDialogue>("Save composition?", new DialogOptions());
            var dialogResult = await dialogReference.Result;

            if (dialogResult?.Canceled is true)
            {
                return;
            }

            if (dialogResult?.Data is true)
            {
                var isSaved = await Save();

                if (!isSaved)
                {
                    return;
                }
            }
        }

        Dispatcher.Dispatch(new Compose());
    }

    private async Task Play()
    {
        var cancellationTokenSource = new CancellationTokenSource(TimeSpan.FromSeconds(10));

        await MidiLauncher.LaunchAsync(BaroquenMelodyState.Value.Path, cancellationTokenSource.Token);
    }

    private async Task<bool> Save()
    {
        var isSaved = await MidiSaver.SaveAsync(
            BaroquenMelodyState.Value.BaroquenMelody!,
            BaroquenMelodyState.Value.Path,
            CancellationToken.None
        ).ConfigureAwait(false);

        if (isSaved)
        {
            Snackbar.Add("Saved composition!", Severity.Success);
            Dispatcher.Dispatch(new MarkCompositionSaved());
        }

        return isSaved;
    }

}
