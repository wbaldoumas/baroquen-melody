@typeparam T

<AutoClosePopover IsPopoverOpen="IsPopoverOpen"
                  OnPopoverClosed="@(() => IsPopoverOpen = false)"
                  OverflowBehavior="OverflowBehavior.FlipOnOpen">
    <PopoverContent>
        @PopoverContent
    </PopoverContent>
</AutoClosePopover>
<MudSelect T="T" OnAdornmentClick="OpenPopover" AdornmentIcon="@Icons.Material.Outlined.QuestionMark" Adornment="Adornment.End" IconSize="Size.Small" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Label="@Label" Value="Value" ValueChanged="ValueChanged">
    @foreach (var item in Items)
    {
        <MudSelectItem Value="item">@ConvertToDisplay(item)</MudSelectItem>
    }
</MudSelect>

@code
{
    [Parameter, EditorRequired] public required RenderFragment PopoverContent { get; set; }

    [Parameter, EditorRequired] public required string Label { get; set; }

    [Parameter, EditorRequired] public required Func<T> ValueProvider { get; set; }

    [Parameter, EditorRequired] public required IEnumerable<T> Items { get; set; }

    [Parameter, EditorRequired] public required EventCallback<T> ValueChanged { get; set; }

    [Parameter, EditorRequired] public required Func<T, string> ConvertToDisplay { get; set; }

    private void OpenPopover() => IsPopoverOpen = true;

    private bool IsPopoverOpen;

    private T Value => ValueProvider();
}
