@typeparam T

<MudOverlay @bind-Visible="IsPopoverOpen" AutoClose="true"/>
<MudPopover AnchorOrigin="Origin.TopCenter"
            Open="IsPopoverOpen"
            Elevation="3"
            Delay="ThemeProvider.TooltipDelay"
            Duration="ThemeProvider.TooltipDuration">
    <MudCard Class="rounded" Outlined="true" Elevation="3">
        <MudCardContent>
            @PopoverContent
        </MudCardContent>
    </MudCard>
</MudPopover>
<MudSelect T="T" OnAdornmentClick="OpenPopover" AdornmentIcon="@Icons.Material.Outlined.QuestionMark" Adornment="Adornment.End" IconSize="Size.Small" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Label="@Label" Value="Value" ValueChanged="ValueChanged">
    @foreach (var item in Items)
    {
        <MudSelectItem Value="item">@ConvertToDisplay(item)</MudSelectItem>
    }
</MudSelect>

@code
{
    [Parameter, EditorRequired] public required RenderFragment PopoverContent { get; set; }

    [Parameter, EditorRequired] public required string Label { get; set; }

    [Parameter, EditorRequired] public required Func<T> ValueProvider { get; set; }

    [Parameter, EditorRequired] public required IEnumerable<T> Items { get; set; }

    [Parameter, EditorRequired] public required EventCallback<T> ValueChanged { get; set; }

    [Parameter, EditorRequired] public required Func<T, string> ConvertToDisplay { get; set; }

    private void OpenPopover() => IsPopoverOpen = true;

    private bool IsPopoverOpen;

    private T Value => ValueProvider();
}
