@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<MudCard Class="rounded mb-3 mx-3" Elevation="3" Outlined="true">
    <CardHeaderSwitch HeaderText="@(OrnamentationType.ToSpaceSeparatedString())"
                      ConfigurationStatus="Status"
                      ValueChanged="HandleIsEnabledChange"/>
    <MudCardContent>
        <MudGrid>
            <MudItem xs="12" sm="4" md="4" lg="4" xl="4" xxl="4">
                <NumericInputWithPopover T="int"
                                         Label="Probability"
                                         ValueChanged="HandleProbabilityChange"
                                         ValueProvider="() => Probability"
                                         Min="0"
                                         Max="100"
                                         IsDisabled="IsDisabled">
                    <PopoverContent>
                        <MudText>The probability of the ornamentation being applied to the composition.</MudText>
                    </PopoverContent>
                </NumericInputWithPopover>
            </MudItem>
            <MudFlexBreak/>
            <MudItem xs="12" sm="12" md="12" lg="12" xl="12" xxl="12" Class="d-none d-sm-flex">
                <MudSlider T="int"
                           Value="@Probability"
                           Class="mx-1 mt-n3"
                           ValueChanged="HandleProbabilityChange"
                           Size="Size.Medium"
                           Variant="Variant.Filled"
                           Color="Color.Tertiary"
                           ValueLabel="true"
                           TickMarks="true"
                           Immediate="true"
                           Min="0"
                           Max="100"
                           Step="1"
                           ValueLabelFormat="0'%'"
                           Culture="CultureInfo.CurrentCulture"
                           Disabled="IsDisabled"/>
            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>

@code
{
    [Parameter, EditorRequired] public OrnamentationType OrnamentationType { get; set; }

    private int Probability => OrnamentationConfigurationState.Value[OrnamentationType]?.Probability ?? 0;

    private ConfigurationStatus Status => OrnamentationConfigurationState.Value[OrnamentationType]?.Status ?? ConfigurationStatus.Enabled;

    private bool IsDisabled => Status is ConfigurationStatus.Disabled or ConfigurationStatus.Locked;

    private void HandleProbabilityChange(int value) => Dispatcher.Dispatch(new UpdateCompositionOrnamentationConfiguration(OrnamentationType, Status, value));

    private void HandleIsEnabledChange(ConfigurationStatus status) => Dispatcher.Dispatch(new UpdateCompositionOrnamentationConfiguration(OrnamentationType, status, Probability));
}
