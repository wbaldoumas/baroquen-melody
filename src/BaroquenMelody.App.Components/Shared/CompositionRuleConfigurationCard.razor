@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<MudCard Class="rounded mb-3 mx-3" Elevation="3" Outlined="true">
    <CardHeaderSwitch HeaderText="@(CompositionRule.ToSpaceSeparatedString())"
                      IsEnabled="@IsEnabled"
                      ValueChanged="HandleIsEnabledChange"/>
    <MudCardContent>
        <MudGrid>
            <MudItem xs="12" sm="4" md="4" lg="4" xl="4" xxl="4">
                <NumericInputWithPopover T="int"
                                         Label="Strictness"
                                         ValueChanged="HandleStrictnessChange"
                                         ValueProvider="() => Strictness"
                                         Min="0"
                                         Max="100">
                    <PopoverContent>
                        <MudText>The strictness of the rule being applied to the composition.</MudText>
                    </PopoverContent>
                </NumericInputWithPopover>
            </MudItem>
            <MudFlexBreak/>
            <MudItem xs="12" sm="12" md="12" lg="12" xl="12" xxl="12" Class="d-none d-sm-flex">
                <MudSlider T="int"
                           Value="@Strictness"
                           Class="mx-1 mt-n3"
                           ValueChanged="HandleStrictnessChange"
                           Size="Size.Medium"
                           Variant="Variant.Filled"
                           Color="Color.Tertiary"
                           ValueLabel="true"
                           TickMarks="true"
                           Immediate="true"
                           Min="0"
                           Max="100"
                           Step="1"
                           ValueLabelFormat="0'%'"
                           Culture="CultureInfo.CurrentCulture"/>
            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>

@code
{
    [Parameter, EditorRequired] public CompositionRule CompositionRule { get; set; }

    private int Strictness => CompositionRuleConfigurationState.Value[CompositionRule]?.Strictness ?? 0;

    private bool IsEnabled => CompositionRuleConfigurationState.Value[CompositionRule]?.IsEnabled ?? false;

    private void HandleStrictnessChange(int value) => Dispatcher.Dispatch(new UpdateCompositionRuleConfiguration(CompositionRule, IsEnabled, value));

    private void HandleIsEnabledChange(bool value) => Dispatcher.Dispatch(new UpdateCompositionRuleConfiguration(CompositionRule, value, Strictness));
}
